#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_WORD_LEN 100
#define MAX_WORDS 10000

typedef struct {
    char word[MAX_WORD_LEN];
    int count;
} WordEntry;

int is_word_char(char c) {
    return isalpha(c) || c == '\'';
}

void to_lowercase(char *str) {
    while (*str) {
        *str = tolower(*str);
        str++;
    }
}

int find_word(WordEntry words[], int word_count, const char *word) {
    for (int i = 0; i < word_count; i++) {
        if (strcmp(words[i].word, word) == 0) {
            return i;
        }
    }
    return -1;
}

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <input file> <word frequency>\n", argv[0]);
        return 1;
    }

    char *input_file = argv[1];
    int frequency = atoi(argv[2]);

    FILE *file = fopen(input_file, "r");
    if (!file) {
        perror("Error opening file");
        return 1;
    }

    WordEntry words[MAX_WORDS];
    int word_count = 0;
    char word[MAX_WORD_LEN];
    int index = 0;

    int c;
    while ((c = fgetc(file)) != EOF) {
        if (is_word_char(c)) {
            word[index++] = c;
        } else {
            if (index > 0) {
                word[index] = '\0';
                to_lowercase(word);
                int pos = find_word(words, word_count, word);
                if (pos >= 0) {
                    words[pos].count++;
                } else {
                    strcpy(words[word_count].word, word);
                    words[word_count].count = 1;
                    word_count++;
                }
                index = 0;
            }
        }
    }
    fclose(file);

    for (int i = 0; i < word_count; i++) {
        if (words[i].count != frequency) {
            printf("%s ", words[i].word);
        }
    }

    return 0;
}
